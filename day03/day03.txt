

변수: let
상수: const
데이터타입: 원시타입(string, number, boolean ...), 객체타입 (객체, 배열)
제어문: 조건문(if, switch), 반복문(for, while)



 함수 ( Function )

    자바스크립트는 함수 지향형 프로그래밍

    프로그래밍 패러다임?
        개발자에게 프로그래머로서 특별한 관점을 갖게 하고 해당 관점에 따라 코드 작성 방식을 결정하는 역할
        => 개발 방법

        명령형
            절차 지향 : 순서를 중요 -> 컴퓨터의 처리구조와 유사, 속도가 빠름 (C)
            객체 지향 : 객체(집단)의 상호 작용을 중시, 유지 보수 용이 (Java, C++, objective-c, C#)

        선언형
            함수 지향 : 순수 함수를 조합하고 프로그래밍하는 방식 (Javascript)

        ---------------------------------------------------------------------------------------

        객체지향과 함수지향의 경계선 모호
        현재는 각 패러다임의 장점을 살려서 개발

        ----------------------------------------------------------------------------------------

        함수 지향 프로그래밍 관련 용어

        불변성 = 함수 밖에서 데이터의 변형을 일으켜서는 안 된다
        클로저 = 부모 함수가 실행 종료되어도 참조할 수 있는 내부 함수 및 값은 기억된다
        순수함수 = 입력값에만 의존하고 부수 효과는 연산에 영향을 미치지 않는다
        일급 객체 함수 = 함수를 입력값으로 사용할 수 있고 반환값으로도 사용할 수 있다
        유지관리가능성 = 외부 효과에 의존되지 않으며 해당 부분만 수정하면 되기에 유지보수가 용이하다

        모듈화 = 함수를 분리하여 재사용 및 관리가 용이하도록 구성해야 한다
        부수효과 = 함수 밖에서 함수의 연산에 영향을 끼치면 안 된다 (외부효과, 사이드이펙트)
        참조 투명성 = 동일한 값에는 항상 동일한 반환값

    ---------------------------------------------------------------------------------------------

    특징
        캡슐화
        상속
        추상화, ...

    원칙
        solid
        단일 책임 원칙
        개방 폐쇄 원칙
        리스코프 치환 원칙
        인터페이스 분리 원칙
        의존성 역전 원칙

    ----------------------------------------------------------------------------------------------

    함수
      어떠한 기능을 만든다, a, b(input) => +(operate) => a+b(output)

    ex)
        나는 두 개의 숫자를 전달 받고
        두 수를 합치는 함수(기능)를 작성하고 싶다

        function addNumber(a, b){
            return a+b
        }

    선언부
        - 선언부는 함수를 실행하는 것이 아니라 기능만 구성하여 컴퓨터에게 기억시키는 것

        function 함수명(파라미터1, 파라미터2, ...)
                        ------------------------- 실행부에서 전달된 값,매개변수, 파람, 인자
        {
            .... 연산
            반환값 (생략 가능)
        }

    실행부
        함수명(전달 값1, 전달 값2)

    반환값
        function sum(a, b){
            console.log(a + b);
            return a+b; // sum(a, b) = a+b
        }

        const result = sum(3, 5); <------ 실행 //8
        console.log(result); // undefined ---------> 8

        * 반환 값은 해당 함수에 실행부에 값을 부여한다는 의미 sum(3, 5) = 8
        반환을 생략하면 sum(3, 5)는 기능은 실행하지만 자체가 가지는 값이 없다.

        따라서 함수의 기능을 통해 나온 결과값을 함수 외부에서 사용하고 싶을 때
        함수의 값을 반환해서 외부에서 사용할 수 있도록 return

    ----------------------------------------------------------------------------------------

    기명함수, 익명함수

        ex)
        function hello(){
            console.log("world");
        }

        ------------------------------------------------------------------------------------

        function (){
            console.log("world");
        }

        -- 재사용 가능성이 없을 때는 굳이 이름을 주지 않고 사용
        -- 하지만 이름이 없으면 실행부 호출 x, 콜백 함수나 클로저, 즉시실행함수

        ------------------------------------------------------------------------------------

    재귀함수
        함수 안에서 동일한 함수를 실행(반복)
        [코딩테스트, 최단 경로, 깊이 탐색 관련 알고리즘의 단골]

        function f(n) {
            if(n <= 1){
                return 1;
            }
            return n + f(n-1);
        }

        f(10)

        ------------------------------------------------------------------------------------

    즉시실행함수
        실행부 없이 선언부만으로 바로 실행되는 함수
        바로 실행되기 때문에 익명함수로 실행하는 것이 보통

        괄호 두 개를 열어 준다. 첫 번째 괄호에 함수 정의
        ()() => (func)()

        (function (){
            .. 실행문
        })()


    화살표함수
        ES6, 7, function 키워드 대신 화살표(=>)를 사용하여 보다 간략한 방법으로 함수 선언
        this 바인딩의 차이가 존재하므로 메서드 용도로는 사용하지 않는다.

        ex) 
            기명함수 표기

            function a (param1, param2) {
                ...
            }

            const a = (param1, param2) => {
                ...
            }

            ==================================

            익명함수 표기

            function () {
                ...
            }

            () => {
                ...
            }

        ------------------------------------------------------------------------------------

    **** 객체

        자바스크립트는 객체 기반의 스크립트 언어이며 사실상 자바스크립트를 이루고 있는 모든 것은
        객체라고 해도 무방, 원시 타입을 제외한 모든 데이터는 객체이기 때문입니다.

        자바스크립트의 객체는
        키와 값으로 구성된 속성들의 집합

        키
        집합에서 특정한 값을 찾기 위해 다른 값들과 비교되는 유일한 값

        프로퍼티
        키로 이름을 구별하고, 해당 키의 값으로 구성되어 있는 데이터 행

        ex) 
            let hyun = {
                name: "양현",
                age: 20,
                height: 190
            }

        접근방법
            1. 마침표 표기법
                hyun.name // 양현 
                객체명(변수명).키값

            2. 대괄호 표기법
                hyun["name"] // 양현

                객체명(변수명)[키값]

                키 값 = 문자열
                단, 숫자로 값을 입력하면 자동으로 string으로 변환되어 숫자는 입력가능

        * 객체는 왜 중요할까요?

            1. 여러 데이터를 한 가지 공통된 분류로 한 변수에 묶어 사용할 수 있다
                (집합, 집단)

            2. Json (Javascript Object Notation)
                    ------------------------------- 자바스크립트 객체 표현식

                (1) 자바스크립트에서 객체를 만들 때 사용하는 표현식
                (2) 데이터를 전송하거나 저장할 때 가장 많이 사용하는 경량의 교환 방식

                ex)
                {
                    id: usei2-234i134948-foslkfj-10948109248,
                    user: {
                        name: "양현",
                        profile_img: "https://이미지저장소.com/profile/hyun2023061123595959"
                    },
                    title: "오늘은 좋은 하루입니다"
                    content: "반갑습니다"
                    createdAt: 2023.06.11
                    comment: [
                        {
                            id: usei2-234i134948-foslkfj-10948109248,
                            content: "오늘도 고생 많으셨습니다",
                            user: {
                                name: "마이멜로디",
                                profile_img: ....
                            }
                        }
                    ]
                    liked: true
                }

--------------------------------------------------------------------------------------------------------------------

// 전역변수, 배열, 콜백함수, 고차함수, 내장함수, 배열 생성, 메모리 부여 방식, 깊은 복사 & 얕은 복사