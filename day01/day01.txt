
- Js ( JavaScript ) -

    1996년 3월 ( 10일 )
    html, css ---> 페이지가 동적으로 움직이지 않았음
    -------------> 페이지를 움직이게 만들고 싶다.

    성능이 저하 <--- google 
    2009년 v8엔진(브라우저엔진) 출시 ---> 성능 급격히 향상

    javascript = 인터프리터 언어
        변환 과정 없이 소스 코드를 바로 실행할 수 있는 프로그래밍 언어

    v8엔진
        js를 필요에 따라 컴파일할 수 있도록 성능을 높이는 엔진

    * 컴파일 언어
        A라는 언어 -> B라는 언어 변환하는 과정 
        ex) java, c#, swift...

        안녕하세요 -> 기계어 컴파일 -> 010101010101010110
        고급언어      저급언어

    -------------------------------------------------------------------

    * Java script === Java 
        Mocha --> Live Script ---> Java의 이름을 빌려서 JavaScript

    -------------------------------------------------------------------

    적용법

    - 내부 -
        html 태그 안에 
        <script>
            ...Java Script 문법
        </script>

        단, 위치와 순서는 중요
        자바스크립트는 위에서 아래로 읽음, 따라서 선언되지 않은 값이나
        DOM 요소는 인식되지 않기 때문에 순서가 중요하다

    - 외부 -
        *.js (확장자명은 js) ---- .css
        <script src="경로" /> --- link

==============================================================================

    자바스크립트 입출력 

        1. 입력
            prompt()

        2. 출력
            -- 디버깅 -- 
            console.log()
            console.error()
            console.warn()

            -- 알림 --
            alert() - 확인
            confirm() - 확인, 취소

            반드시 browser 환경에서만 작동한다.
    
=============================================================================

    javascript의 실행환경 

        browser 내부? -- (o) --- 브라우저를 열어야만 확인 가능한지 
        browser 외부? -- (o) --- 브라우저 바깥 쉘이나 터미널에서도 확인 가능한지

    NodeJS

        크롬의 v8엔진을 브라우저 바깥으로 꺼내어 JS를 브라우저가 아닌 환경에서도
        실행시킬 수 있도록 하는 런타임(환경)

        이로 인해 개발자들은 JS로 웹서버를 구성하여 백엔드 개발도 가능 (express, fastify, nestJS, trpc...)
        프론트엔드 프레임워크를 활용하여 개발 (react, vue, angular, qwick, svelt...)

        reactJS와 같은 JS 프레임워크나 라이브러리(도구)들은 nodeJS 환경에서 실행 
        js를 브라우저가 아닌 환경에서 실행할 수 있다

        https://nodejs.org/ko/
        설치 -> 확인 (node -v)

        cmd -> node -v
        vscode 종료 후 재시작 -> 터미널 -> node -v

        환경변수
            프로젝트가 실행되는 환경(경로)를 특정한 값에 저장하여
            기본 값으로 사용

            D:/..../java --version 
            java --version 

===================================================================================================

    자바스크립트의 자료형 
        컴퓨터에서 자주 사용되는 값을 사용하기 위해
        해당 값을 기억시킬 필요가 있다.

        예를 들면
        a = 5555555555555555555555555555555555555555
        a = '안녕하세요'

        나는 a라는 바구니에 숫자 5를 담아놓을거야
        (a를 최초로 생성 - 선언)
        (a에 값을 배정 - 할당)

        그리고 이 5는 a라는 이름으로 사용 가능
        이 과정에서는 a는 변수라고 부르며
        이때 a에는 자료형의 종류를 설정할 수 있음

        a에 자료형을 NUMBER로 설정하면 숫자 외에는 할당될 수 없음 

        ** 그러나 자바스크립트는 
        이러한 과정을 컴파일이 아닌 런타임(실행) 이후 판단 

        자료형이 존재하기는 하지만 따로 지정하지 않으며 어떠한 값이든
        변수에 할당 및 재할당이 가능합니다.

        ex) 

            Java  (정적 타입 언어)
                int a = 5;
                a = "안녕하세요";   (x)

            JavaScript (동적 타입 언어)
                let a = 5;
                a = '안녕하세요';   (o)

    자료형의 종류 
         console.log('5') console.log(5)
         // 5

         * 원시 타입
            number ( 숫자, 정수/실수 구분 x )
            string ( 문자열 "", '', `` )
            boolean ( 참(true), 거짓(false) )
            null  ( 값이 비어있음을 지정 )
            undefined ( 값이 아예 지정 되어있지 않은 상태 ) 
            symbol ( 이터러블 오브젝트의 키 값으로 활용 )

         * 객체 타입 
            Object - map, set, array, object 

            자바스크립트에서 원시값을 제외한 모든 것은 Object type 
            배열이나, set, map은 다른 언어에서는 다른 자료구조로 구분되지만

            자바스크립트에서는 모두 눈속임에 불과, 사실은 모두 Object type

            let seongyong = {
                age: 20, 
                height: 190
            }


    변수
        var(사용x), let, const로 표기

        1. 자바스크립트에서 변수의 자료형은 선언할 때 필요로 하지 않습니다.
        (let, const로만 표기 가능, 다른 언어는 다양한 자료형을 표기)

        자바스크립트는 인터프리터언어로 컴파일 과정을 겪지 않기 때문에
        런타임 환경에서 자료형을 추론하여 부여

        2. 
            console.log("안녕하세요")
            console.log("안녕하세요")
            console.log("안녕하세요")
            console.log("안녕하세요")
            console.log("안녕하세요")

            let a = '안녕하세요'

            console.log(a)
            console.log(a)
            console.log(a)
            console.log(a)
            console.log(a)

            컴퓨터에게 값을 기억시키고 원할 때 재사용 가능

        3. 선언 방법

            let/const 변수명; ( 선언 ) ----> undefined 
            변수명 = null ( 할당, 초기화 )

            => let a = 5; (선언과 할당을 동시에 한 것)
               5라는 숫자를 a라는 이름으로 컴퓨터에게 기억시킨 것

        4. 변수의 종류

            * 변수 (변하는 값)
                ex)
                    let a = 5;
                    a = a-1;

            * 상수 (항상 같은 값)
                ex) 
                    const a = 5;
                    a = 6 (x)

        5. var의 문제점 

            var는 ES6(ES2015) 이전에 존재하던 변수 선언법
            뭐가 문제라서 let/const 등장?

            1) 중복 선언이 가능
                let a = 5;
                let a = 6;  --- error (이미 정의되어 있으므로)

                var b = 5;
                var b = 6; (o) 

            2) 호이스팅
                자바스크립트 실행 이전 평가 과정, 선언부를 먼저 저장
                var의 경우 할당보다 선언이 먼저 평가되어 실제 코드 순서에서는
                선언되어 있지 않았음에도 undefined 값을 갖고 있는 현상을
                호이스팅이라고 함.

                마치 선언부가 최상단에 올라오는 효과같다라고 해서
                개발자들 사이에서 호이스팅이라고 부르기 시작한 것

                ex) 

                console.log(a) // undefined

                var a = 5;
                console.log(a) // 5

                이러한 점은 개발자들이 개발함에 있어 혼동을 느낄 수 있음 
                DX에 좋지 않음 

                어떻게 해야 개선할 수 있을까?
                ES6 (ES2015) -> let / const 를 만들어 중복선언 및 호이스팅 개선

                중복선언 --> error 
                호이스팅 --> error


----------------------------------------------------------------------------------------------

    JavaScript 공부법 

        기능을 구현하고 싶다.
            최종 결과(output)
            입력값(input)
            연산(operate)

----------------------------------------------------------------------------------------------

    연산자

        산술 연산자
            ( +, -, *, /, % )

            let a = 5;
            let b = 2;
            console.log(a + b) // 7
            let c = a + b;
            console.log(c) // 7

            console.log(a - b) // 3
            console.log(a * b) // 10
            console.log(a / b) // 2.5
            console.log(a % 2) // 1

            ----------------------------------

            let d = true;
            (true = 1, false = 0)
            console.log(a + d) // 6
            console.log(a + null) // 5
            console.log(a + undefined) // NaN (Not a Number)

        단항 산술 연산자

            ++ 값이 1 증가
            -- 값이 1 감소

            a = 5;

            a++ // 6
            a-- // 5

        전위 연산자
            a = 5;
            a++ --> 연산 후에 값을 더하라
            ++a --> 연산 전에 값을 더하라

            console.log(a++) // 5
            console.log(a) // 6
            console.log(++a) // 7
            console.log(a) // 7

        문자열 연결 연산자
            let a = "안"
            let b = "녕"

            console.log(a+b) // "안녕"
            console.log("안녕하세요"-"안녕") // "하세요" ? (x)

            a = '1'
            b = 2;

            console.log(a+b) // "12"

            - 피연산자 중 하나 이상이 문자열인 경우 문자열로 동작

        할당 연산자
            = 
                ex) let a = 5;

            산술연산자 + =
                ex)
                    let a = 5;
                    a += 5; // 10 ---> a = a + 5;
                    값의 누적

                    let str = "안"
                    str += "녕" // str = str + "녕"
                    ....
                    str += "요"
                    console.log(str) // "안녕하세요"

        우선 순위 연산자
            10 * 2 + 2 => 22
            10 * (2 + 2) => 40

            >> 조건식

-----------------------------------------------------------------------------------------------------

    조건식
        명제의 참과 거짓을 구분할 때 사용 -> boolean 타입을 반환 (true/false)

        비교 연산자
            == 동등 비교 ----> 값만 같은지
            === 일치 비교 ----> 값과 자료형이 같은지 
                ex) 
                    5 == "5" // true
                    5 === "5" // false

            != 부등 비교 ----> 값만 다른지
                ex) 
                    "5" != 3 // true
                    "5" != 5 // false

            !== 불일치 비교 ---> 값이나 타입이 다른지
                ex) 
                    "5" !== 5 // true

        논리 연산자 
            and(&) or(|) not(!) 

            || 논리합 (or) - 둘 중에 하나라도 true면 true
            && 논리곱 (and) - 둘 다 true여야만 true
            ! 부정 - !true => false

            ex)                                 (&&)
                true || true --> true           true
                true || false --> true          false
                false || true --> true          false
                false || false --> false        false




