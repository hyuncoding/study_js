

    객체
        예제-1, 실습
        키와 값으로 구성된 속성(프로퍼티)의 집합
        여러 개의 데이터를 특정한 주제로 묶을 때

    메서드
        객체의 속성의 값으로 함수가 들어갈 수 있을까?
        객체의 프로퍼티의 값이 함수일 때 일반 함수와 구분을 위해 메서드라고 부른다.

        ex)
            let message = {
                print: function(message){
                    console.log(message);
                },

                print: (message) => {
                    ...
                },

                print(message){
                    ...
                }


            }

            message.print("김성용"); // 김성용
            console.log()

    형(타입) 변환

        자바스크립트의 데이터는 모두 자료형을 가지고 있습니다.
        그러나 이런 타입은 개발자의 의도에 따라 변환될 수 있다.
        -----------------------
                        -----> 내가 필요로 할 때 데이터 타입 수정 가능

        1. 문자열
            1+'2' / "12"
            1+'' / "1"
            ------------> 암묵적 타입 변환

            String(1) // "1"
            .toString() // 

        2. 숫자형
            Number('0') // 0
            parseInt('0') // 0

        3. 불리언형
            Boolean(1) // true
            Boolean(undefined) // false
            Boolean(NaN) // false
            Boolean('') // false
            Boolean('false') // true
            Boolean(null) // false
            Boolean({}) // true

    ----------------------------------------------------------------------------

    배열
        자바스크립트에서의 배열은 이름과 인덱스로 참조되는 정렬된 값의 집합으로 정의됩니다.
        // 순서가 보장된 값들의 집합
        
        배열을 구성하는 값은 각각 배열의 요소라고 하여 배열의 위치를 가리키는 숫자를 인덱스라고 합니다.
        인덱스는 고유한 값이며 데이터를 조회할 때 쓰는 키 값으로 활용

        * 자바스크립트만의 배열의 특징
            1. 배열 요소의 타입이 고정되어있지 않으므로 같은 배열에 다른 타입의 요소가 들어갈 수 있다.
            2. 배열의 인덱스는 연속적이지 않아도 되며, 특정 요소가 비어있을 수 있음
            3. 자바스크립트의 배열은 Array라는 이름을 갖고는 있지만 Object(객체)

        배열의 표기법
            0개 이상의 값을 쉼표로 구분, 대괄호로 묶는다.
            ex) [1, 2, 3, 4, 5]

            첫 번째 값의 인덱스(검색을 빠르게 하기 위해 부여하는 순번)는 0부터 시작

            const arr = [a, b, c, d, e]
            const obj = {
                0: "a", 
                1: "b",
                2: "c",
                3: "d",
                4: "e"
            }
            obj[0], arr[0] // a 

            -----------------------------------------------------------------------
            const arr = [a, b, c, d, e]

            배열의 길이(요소의 개수) --> 5
            배열의 인덱스 ---> 0 ~ 4
            배열의 접근 방법 --> 배열명[인덱스번호]
                                arr[3] // d

            배열의 마지막 인덱스 ---> arr[arr.length - 1]
                               ---> arr.at(-1)

            -----------------------------------------------------------------------

            배열의 내장함수
            push, pop, shift, unshift, splice, slice, concat, indexof, join, includes...

                * 원본 배열, 복사본 배열, 반환값

            배열명.push() : 원본 배열의 맨 끝에 요소를 추가
            배열명.pop() : 원본 배열의 맨 끝 요소를 제거, 제거 된 요소를 반환

            배열명.unshift() : 원본 배열의 맨 처음에 요소를 추가
            배열명.shift() : 원본 배열의 맨 처음 요소를 제거, 제거된 요소를 반환

            배열명.concat(arr1, arr2) : 인자로 두 배열을 전달 받고, 두 배열을 합친 복사본 배열을 반환
            배열명.join(str) : 배열 요소 사이에 원하는 문자를 삽입한 문자열을 반환 
                              ex [1, 2, 3, 4, 5] => "12345"

            배열명.reverse() : 배열 역순 배치 [1, 2, 3, 4, 5] -> [5, 4, 3, 2, 1]

                        -- 시작인덱스, 숫자, 대체 요소
            배열명.splice(start, count, item)
                - 인자로 지정된 원본 배열의 요소를 제거하고, 새로운 요소를 추가할 수 있다
                - 삭제된 부분을 배열로 반환
                - 배열의 중간 부분의 삭제 및 수정을 위해 사용

            배열명.slice(start, end)
                                ---- 직전까지 (end 포함하지 않음)
                - 인자로 지정된 배열의 부분을 복사하여 반환, 이때 원본 배열은 삭제되지 않습니다.
                - 내가 따로 빼고 싶은 부분만 복사하여 가지고 올 때 사용

            배열명.indexOf()
                - 인자로 지정된 요소가 있는지 배열에서 검색 (인덱스 반환)
                - 만약에 값이 있다면 인덱스 값을 반환
                - 값이 없다면 <-1>을 반환

            배열명.includes()
                - 인자로 지정된 요소가 있는지 없는지 탐색하여 t/f (검사)
                - ES7(2016)
                - IE 9 이상
            

        